import asyncio
import logging
from datetime import datetime
import os
import sys

# Th√™m ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i v√†o sys.path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Import c√°c module c·∫ßn thi·∫øt t·ª´ d·ª± √°n
from utils.config import Config
from telegram_handler import TelegramHandler
from indicators.ta_signals import TechnicalSignals
from indicators.chart_plotter import ChartPlotter
from macro_data.macro_checker import MacroChecker
from weekly_forecast import WeeklyForecast

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class CryptoMacroAlertBot:
    def __init__(self):
        self.telegram = TelegramHandler()
        self.ta_signals = TechnicalSignals()
        self.chart_plotter = ChartPlotter()
        self.macro_checker = MacroChecker()
        self.weekly_forecast = WeeklyForecast()
        
        # ƒê·ªÉ theo d√µi c√°c c·∫£nh b√°o crypto ƒë√£ g·ª≠i, tr√°nh g·ª≠i l·∫∑p l·∫°i
        self.last_crypto_alerts_sent = {} # { (symbol, timeframe): last_alert_message_hash }
        self.last_macro_alerts_sent = set() # { event_id }

    async def run_check(self):
        logging.info("B·∫Øt ƒë·∫ßu chu k·ª≥ ki·ªÉm tra c·∫£nh b√°o...")

        # --- 1. Ki·ªÉm tra Macro Data ---
        macro_alerts = self.macro_checker.get_new_macro_alerts()
        for alert_message in macro_alerts:
            # So s√°nh v·ªõi c√°c c·∫£nh b√°o ƒë√£ g·ª≠i ƒë·ªÉ tr√°nh l·∫∑p
            # ƒê·ªÉ ƒë∆°n gi·∫£n, ta d·ª±a v√†o vi·ªác event_id ƒë√£ ƒë∆∞·ª£c th√™m v√†o notified_macro_events trong MacroChecker
            await self.telegram.send_message(alert_message)

        # --- 2. Ki·ªÉm tra Crypto Data ---
        for symbol in Config.SYMBOLS:
            for timeframe in Config.TIMEFRAMES:
                logging.info(f"üìä ƒêang x·ª≠ l√Ω Crypto {symbol}-{timeframe}")

                df = self.ta_signals.get_klines(symbol, timeframe, limit=100) 
                
                if df.empty:
                    logging.warning(f"‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu cho {symbol}-{timeframe}")
                    continue
                
                # Ki·ªÉm tra d·ªØ li·ªáu c√≥ ƒë·ªß n·∫øn kh√¥ng
                if len(df) < 100:
                    logging.warning(f"‚ùå D·ªØ li·ªáu kh√¥ng ƒë·ªß cho {symbol}-{timeframe} (c·∫ßn √≠t nh·∫•t 100 n·∫øn)")
                    continue
                
                # Ki·ªÉm tra d·ªØ li·ªáu c√≥ gi√° tr·ªã NaN kh√¥ng
                if df.isnull().values.any():
                    logging.warning(f"‚ö†Ô∏è D·ªØ li·ªáu c√≥ gi√° tr·ªã NaN cho {symbol}-{timeframe}")
                    df = df.fillna(method='ffill')  # ƒêi·ªÅn gi√° tr·ªã NaN b·∫±ng gi√° tr·ªã tr∆∞·ªõc ƒë√≥

                df_with_indicators = self.ta_signals.calculate_indicators(df, symbol, timeframe) 

                if df_with_indicators.empty or df_with_indicators.isnull().all().all():
                    logging.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t√≠nh to√°n ch·ªâ b√°o cho {symbol}-{timeframe} ho·∫∑c d·ªØ li·ªáu ch·ªâ b√°o to√†n NaN.")
                    continue

                alert_message = ""
                confirmation_count = 0
                alert_strength = "Y·∫æU"
                
                # L·∫•y d·ªØ li·ªáu n·∫øn cu·ªëi c√πng ƒë·ªÉ ki·ªÉm tra t√≠n hi·ªáu
                latest_data = df_with_indicators.iloc[-1]
                prev_data = df_with_indicators.iloc[-2] if len(df_with_indicators) > 1 else None

                # Ki·ªÉm tra RSI
                if 'rsi' in latest_data:
                    latest_rsi = latest_data['rsi']
                    # L·∫•y c·∫•u h√¨nh cho c·∫∑p ti·ªÅn
                    symbol_config = Config.SYMBOL_CONFIGS.get(symbol, Config.SYMBOL_CONFIGS['DEFAULT'])
                    rsi_oversold = symbol_config.get('rsi_oversold', Config.RSI_OVERSOLD_THRESHOLD)
                    rsi_overbought = symbol_config.get('rsi_overbought', Config.RSI_OVERBOUGHT_THRESHOLD)
                    
                    # C·∫£nh b√°o RSI qu√° b√°n
                    if latest_rsi < rsi_oversold:
                        alert_message += f"- RSI ({latest_rsi:.2f}) qu√° b√°n ({rsi_oversold}).\n"
                        confirmation_count += 1
                        alert_strength = "TRUNG B√åNH"
                    
                    # C·∫£nh b√°o RSI qu√° mua
                    elif latest_rsi > rsi_overbought:
                        alert_message += f"- RSI ({latest_rsi:.2f}) qu√° mua ({rsi_overbought}).\n"
                        confirmation_count += 1
                        alert_strength = "TRUNG B√åNH"

                # Ki·ªÉm tra MACD
                if 'macd_diff' in latest_data and prev_data is not None:
                    latest_macd_diff = latest_data['macd_diff']
                    prev_macd_diff = prev_data['macd_diff']
                    
                    # L·∫•y c·∫•u h√¨nh cho c·∫∑p ti·ªÅn
                    symbol_config = Config.SYMBOL_CONFIGS.get(symbol, Config.SYMBOL_CONFIGS['DEFAULT'])
                    
                    # C·∫£nh b√°o MACD giao c·∫Øt l√™n (t√≠n hi·ªáu mua ti·ªÅm nƒÉng)
                    if prev_macd_diff < 0 and latest_macd_diff > 0:
                        alert_message += "- MACD giao c·∫Øt l√™n (t√≠n hi·ªáu mua ti·ªÅm nƒÉng).\n"
                        confirmation_count += 1
                        alert_strength = "M·∫†NH"
                    
                    # C·∫£nh b√°o MACD giao c·∫Øt xu·ªëng (t√≠n hi·ªáu b√°n ti·ªÅm nƒÉng)
                    if prev_macd_diff > 0 and latest_macd_diff < 0:
                        alert_message += "- MACD giao c·∫Øt xu·ªëng (t√≠n hi·ªáu b√°n ti·ªÅm nƒÉng).\n"
                        confirmation_count += 1
                        alert_strength = "M·∫†NH"
                    
                    # Ki·ªÉm tra ph√¢n k·ª≥ MACD
                    # Ph√¢n k·ª≥ tƒÉng (bullish divergence)
                    if (latest_data['low'] < prev_data['low'] and 
                        latest_macd_diff > prev_macd_diff):
                        alert_message += "- MACD ph√¢n k·ª≥ tƒÉng (ti·ªÅm nƒÉng tƒÉng gi√°).\n"
                        confirmation_count += 1
                        alert_strength = "M·∫†NH"
                    
                    # Ph√¢n k·ª≥ gi·∫£m (bearish divergence)
                    elif (latest_data['high'] > prev_data['high'] and 
                          latest_macd_diff < prev_macd_diff):
                        alert_message += "- MACD ph√¢n k·ª≥ gi·∫£m (ti·ªÅm nƒÉng gi·∫£m gi√°).\n"
                        confirmation_count += 1
                        alert_strength = "M·∫†NH"

                # Ki·ªÉm tra EMA crossover
                if 'ema_cross_signal' in latest_data and latest_data['ema_cross_signal'] != 0:
                    alert_message += "- EMA giao c·∫Øt.\n"
                    confirmation_count += 1
                    alert_strength = "M·∫†NH"
                
                # Ki·ªÉm tra Bollinger Bands
                if 'bb_percent' in latest_data:
                    latest_bb_percent = latest_data['bb_percent']
                    if latest_bb_percent <= 0:
                        alert_message += "- Gi√° ch·∫°m Bollinger Bands d∆∞·ªõi.\n"
                        confirmation_count += 1
                        alert_strength = "TRUNG B√åNH"
                    elif latest_bb_percent >= 1:
                        alert_message += "- Gi√° ch·∫°m Bollinger Bands tr√™n.\n"
                        confirmation_count += 1
                        alert_strength = "TRUNG B√åNH"
                
                # Ki·ªÉm tra Stochastic
                if 'stoch_k' in latest_data and 'stoch_d' in latest_data:
                    latest_stoch_k = latest_data['stoch_k']
                    latest_stoch_d = latest_data['stoch_d']
                    
                    # C·∫£nh b√°o Stochastic qu√° b√°n
                    if latest_stoch_k < 20 and latest_stoch_d < 20:
                        alert_message += "- Stochastic qu√° b√°n.\n"
                        confirmation_count += 1
                        alert_strength = "TRUNG B√åNH"
                    
                    # C·∫£nh b√°o Stochastic qu√° mua
                    elif latest_stoch_k > 80 and latest_stoch_d > 80:
                        alert_message += "- Stochastic qu√° mua.\n"
                        confirmation_count += 1
                        alert_strength = "TRUNG B√åNH"
                    
                    # C·∫£nh b√°o Stochastic crossover
                    if prev_data is not None:
                        prev_stoch_k = prev_data['stoch_k']
                        prev_stoch_d = prev_data['stoch_d']
                        
                        # Stochastic crossover l√™n
                        if prev_stoch_k < prev_stoch_d and latest_stoch_k > latest_stoch_d:
                            alert_message += "- Stochastic crossover l√™n.\n"
                            confirmation_count += 1
                            alert_strength = "M·∫†NH"
                        
                        # Stochastic crossover xu·ªëng
                        elif prev_stoch_k > prev_stoch_d and latest_stoch_k < latest_stoch_d:
                            alert_message += "- Stochastic crossover xu·ªëng.\n"
                            confirmation_count += 1
                            alert_strength = "M·∫†NH"

                # 4. G·ª≠i c·∫£nh b√°o n·∫øu c√≥ t√≠n hi·ªáu V√Ä t√≠n hi·ªáu l√† M·ªöI
                if alert_message and confirmation_count >= 2:  # Y√™u c·∫ßu √≠t nh·∫•t 2 ch·ªâ b√°o x√°c nh·∫≠n
                    current_message_hash = hash(alert_message) # T·∫°o hash t·ª´ n·ªôi dung tin nh·∫Øn
                    
                    # Ch·ªâ g·ª≠i n·∫øu tin nh·∫Øn c·∫£nh b√°o kh√°c v·ªõi l·∫ßn cu·ªëi c√πng g·ª≠i cho c·∫∑p/khung th·ªùi gian n√†y
                    if self.last_crypto_alerts_sent.get((symbol, timeframe)) != current_message_hash:
                        current_time_str = datetime.now().strftime("%Y%m%d%H%M%S")
                        chart_filename = f"{symbol}_{timeframe}_alert_{current_time_str}.png"
                        chart_path = self.chart_plotter.plot_chart(df_with_indicators, symbol, timeframe, chart_filename)

                        full_message = (
                            f"üìà *C·∫£nh b√°o Crypto: {symbol} - {timeframe}*\n"
                            f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                            f"‚ö°Ô∏è *T√≠n hi·ªáu ({confirmation_count} ch·ªâ b√°o x√°c nh·∫≠n):*\n{alert_message}\n"
                            f"üí™ *ƒê·ªô m·∫°nh:* {alert_strength}\n"
                            f"\\#CryptoAlert \\#{symbol} \\#{timeframe}"
                        )

                        if chart_path:
                            await self.telegram.send_photo(chart_path, caption=full_message)
                            # X√≥a ·∫£nh sau khi g·ª≠i ƒë·ªÉ tr√°nh ƒë·∫ßy b·ªô nh·ªõ
                            try:
                                os.remove(chart_path)
                                logging.info(f"ƒê√£ x√≥a file ·∫£nh: {chart_path}")
                            except OSError as e:
                                logging.error(f"L·ªói khi x√≥a file ·∫£nh {chart_path}: {e}")
                        else:
                            await self.telegram.send_message(full_message)
                        
                        # C·∫≠p nh·∫≠t hash c·ªßa tin nh·∫Øn ƒë√£ g·ª≠i
                        self.last_crypto_alerts_sent[(symbol, timeframe)] = current_message_hash
                else:
                    logging.info(f"Kh√¥ng c√≥ t√≠n hi·ªáu c·∫£nh b√°o m·ªõi cho {symbol}-{timeframe}.")
                    # Reset hash n·∫øu kh√¥ng c√≥ c·∫£nh b√°o n√†o, ƒë·ªÉ l·∫ßn sau n·∫øu c√≥ c·∫£nh b√°o l·∫°i s·∫Ω g·ª≠i
                    self.last_crypto_alerts_sent[(symbol, timeframe)] = None

        # G·ª≠i d·ª± b√°o tu·∫ßn v√†o Ch·ªß Nh·∫≠t
        await self.weekly_forecast.send_weekly_forecast()

        logging.info("K·∫øt th√∫c chu k·ª≥ ki·ªÉm tra c·∫£nh b√°o.")


async def main():
    bot = CryptoMacroAlertBot()
    
    # Ch·∫°y d·ª± b√°o tu·∫ßn trong background
    asyncio.create_task(bot.weekly_forecast.run_weekly_monitor())
    
    # Ch·∫°y l·∫ßn ƒë·∫ßu ngay l·∫≠p t·ª©c
    await bot.run_check()
    
    # Sau ƒë√≥ ch·∫°y l·∫∑p l·∫°i sau m·ªói kho·∫£ng th·ªùi gian ƒë·ªãnh c·∫•u h√¨nh
    while True:
        logging.info(f"ƒêang ch·ªù {Config.CHECK_INTERVAL_MINUTES} ph√∫t cho chu k·ª≥ ki·ªÉm tra ti·∫øp theo...")
        await asyncio.sleep(Config.CHECK_INTERVAL_MINUTES * 60) # Chuy·ªÉn ph√∫t sang gi√¢y
        await bot.run_check()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("Bot ƒë√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng.")
    except Exception as e:
        logging.error(f"L·ªói nghi√™m tr·ªçng x·∫£y ra: {e}", exc_info=True)
